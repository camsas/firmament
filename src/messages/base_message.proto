// The Firmament project
// Copyright (c) 2011-2012 Malte Schwarzkopf <malte.schwarzkopf@cl.cam.ac.uk>
//
// BaseMessage is the root element of Firmament's message hierarchy. Any message
// can be treated as a BaseMessage, and this is the type used for transmission
// channels. Subordinate messages are implemented as optional members, and
// need to be registered in the comment below.

syntax = "proto3";

package firmament;

// Message registry:
// -------------------
// 001  - TestMessage
// 002  - HeartbeatMessage
// 003  - RegistrationMessage
// 004  - TaskHeartbeatMessage
// 005  - TaskSpawnMessage
// 006  - TaskStateMessage
// 007  - TaskInfoRequestMessage
// 008  - TaskInfoResponseMessage
// 009  - TaskDelegationRequest
// 010  - TaskDelegationResponse
// 011  - TaskKillMessage
// 012  - TaskFinalReport   XXX(malte): inconsistent name!

import "messages/test_message.proto";
import "messages/heartbeat_message.proto";
import "messages/registration_message.proto";
import "messages/task_heartbeat_message.proto";
import "messages/task_spawn_message.proto";
import "messages/task_state_message.proto";
import "messages/task_info_message.proto";
import "messages/task_delegation_message.proto";
import "messages/task_kill_message.proto";
import "base/task_final_report.proto";

message BaseMessage {
  // TODO(malte): Think about having a type identifier in here, and use a
  // special "batch message" type to indicate presence of multiple extensions.
  TestMessage test = 1;
  HeartbeatMessage heartbeat = 2;
  RegistrationMessage registration = 3;
  TaskHeartbeatMessage task_heartbeat = 4;
  TaskSpawnMessage task_spawn = 5;
  TaskStateMessage task_state = 6;
  TaskInfoRequestMessage task_info_request = 7;
  TaskInfoResponseMessage task_info_response = 8;
  TaskDelegationRequestMessage task_delegation_request = 9;
  TaskDelegationResponseMessage task_delegation_response = 10;
  TaskKillMessage task_kill = 11;
  TaskFinalReport task_final_report = 12;
}
